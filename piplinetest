#!groovy
// Check properties
properties([disableConcurrentBuilds()])

pipeline {
	agent {
		label 'master'
	}
	parameters {
		string(name: 'SALON', defaultValue: 'null')
	}
	options {
		buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
		timestamps()
		skipStagesAfterUnstable()
	}
	stages {
                stage("Настройка маршрутизации") {
                        steps {
				script {
					GET_SALON = sh (
						script: 'echo 10.20.' + params.SALON + '.6',
						label: 'Получил ip адресс PROXMOX',
						returnStdout: true
					).trim()
					sh ( script: 'ssh-keygen -f "/var/lib/jenkins/.ssh/known_hosts" -R ' + GET_SALON )
					GET_LOCALIP = sh (
						script: 'ip a | grep 10.20.' + params.SALON + ' | awk \'{print $2}\'',
						label: 'Полчил информацию об имеющеемся ip адрессе на локальной машине',
						returnStdout: true
					).trim()
					GET_IPM = sh (
						script: 'echo 10.20.' + params.SALON + '.100/24',
						label: 'Сгенерирован ip адресс для jenkins',
						returnStdout: true
					).trim()
					GET_GWIP = sh (
						script: 'echo 10.20.' + params.SALON + '.1/24',
						label: 'Сгенерирован ip адресс для компьютера который используется в качестве роутера',
						returnStdout: true
					).trim()
					if (GET_LOCALIP != GET_IPM) {
						sh ( script: 'sudo ip a add 10.20.' + params.SALON + '.100/24 dev ens32', label: 'Добавлен ip адресс на jenkins' )
					}
					GET_TEST = sh (
						script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 "ip a" | grep 10.20.' + params.SALON + ' | awk \'{print $2}\'',
						label: 'Получил информацию об имеющеемся ip адрессе на роутаре',
						returnStdout: true
					).trim()
					if (GET_TEST != GET_GWIP) {
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 ip a add 10.20.' + params.SALON + '.1/24 dev vmbr0',label: 'Добавление ip адресса на роутер')
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 iptables -A FORWARD -o vmbr0 -s 10.20.' + params.SALON + '.0/24 -j ACCEPT',label: 'Правило для исходящего трафика')
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 iptables -A FORWARD -i vmbr0 -d 10.20.' + params.SALON + '.0/24 -j ACCEPT', label: 'Правило для входяего трафика')
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 iptables -t nat -A POSTROUTING -o vmbr0 -s 10.20.' + params.SALON + '.0/24 -j MASQUERADE', label: 'Маскард изнутри во внешку')
					}
					sh ( script: 'sshpass -p \'yjjnhjgbk\' scp -o "StrictHostKeyChecking=no" /home/kroler123/autoanswer.sh root@10.20.' + params.SALON + '.6:/root/autoanswer.sh',label: 'Пересылка файла autoanswer на Proxmox')
				}
			}
		}
		stage ('SSH transfer') {
			steps {
				script {
					def GET_NET = sh (
						script:'echo 10.20.' + params.SALON + '.0', 
						label: 'Получаем сеть' ,
						returnStdout: true
					).trim() as String
					sshPublisher(
						continueOnError: false, failOnError: true,
						publishers: [
							sshPublisherDesc (
								configName: "salon" + params.SALON ,
								verbose: true,
								transfers: [
									sshTransfer (
										execCommand: 'net=`echo 10.20.' + params.SALON + '.0` \
										              echo Ney-$net',
										execTimeout: 5000
									)
								]
							)
						]
					)
				}
			}
		}
	}
}
