#!groovy
// Check properties
properties([disableConcurrentBuilds()])

pipeline {
	agent {
		label 'master'
	}
	parameters {
		string(name: 'SALON', defaultValue: 'null', description: 'Input number salon')

		booleanParam(name: 'ROUTE', defaultValue: true, description: 'Setting Route for salon?')

		booleanParam(name: 'ASTERISK', defaultValue: false, description: 'Installed asterisk?')

		booleanParam(name: 'DC', defaultValue: false, description: 'Installed DomainController?')

		booleanParam(name: 'BACKUP', defaultValue: false, description: 'Installed Backup?')

		booleanParam(name: 'SSH',defaultValue: false, description: 'Installed SSH to Proxmox?')

		choice(name: 'IMAGE', choices: ['vzdump-qemu-103-2019_03_18-11_16_56.vma.lzo','vzdump-qemu-100-2019_04_19-14_58_04.vma.lzo'], description: 'Choice image for backup 103-windows server 2008, 100 - windows server 2016')
	}
	options {
		buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
		timestamps()
		skipStagesAfterUnstable()
		disableConcurrentBuilds()
	}
	stages {
                stage("Installing route") {
			when {
				expression { params.ROUTE == true }
			}
                        steps {
				script {
					GET_SALON = sh (
						script: 'echo 10.20.' + params.SALON + '.6',
						label: 'Получил ip адресс PROXMOX',
						returnStdout: true
					).trim()
					GET_ASTERISK = sh (
						script: 'echo 10.20.' + params.SALON + '.20',
						label: 'Получил ip адресс ASTERISK',
						returnStdout: true
					).trim()
					GET_DC = sh (
						script: 'echo 10.20.' + params.SALON + '.4',
						label: 'Получил ip адресс DC',
						returnStdout: true
					).trim()
					sh ( script: 'ssh-keygen -f "/var/lib/jenkins/.ssh/known_hosts" -R ' + GET_SALON )
					sh ( script: 'ssh-keygen -f "/var/lib/jenkins/.ssh/known_hosts" -R ' + GET_ASTERISK )
					sh ( script: 'ssh-keygen -f "/var/lib/jenkins/.ssh/known_hosts" -R ' + GET_DC )
					GET_LOCALIP = sh (
						script: 'ip a | grep 10.20.' + params.SALON + ' | awk \'{print $2}\'',
						label: 'Полчил информацию об имеющеемся ip адрессе на локальной машине',
						returnStdout: true
					).trim()
					GET_IPM = sh (
						script: 'echo 10.20.' + params.SALON + '.100/24',
						label: 'Сгенерирован ip адресс для jenkins',
						returnStdout: true
					).trim()
					GET_GWIP = sh (
						script: 'echo 10.20.' + params.SALON + '.1/24',
						label: 'Сгенерирован ip адресс для компьютера который используется в качестве роутера',
						returnStdout: true
					).trim()
					if (GET_LOCALIP != GET_IPM) {
						sh ( script: 'sudo ip a add 10.20.' + params.SALON + '.100/24 dev ens32', label: 'Добавлен ip адресс на jenkins' )
					}
					GET_TEST = sh (
						script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 "ip a" | grep 10.20.' + params.SALON + ' | awk \'{print $2}\'',
						label: 'Получил информацию об имеющеемся ip адрессе на роутаре',
						returnStdout: true
					).trim()
					if (GET_TEST != GET_GWIP) {
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 ip a add 10.20.' + params.SALON + '.1/24 dev vmbr0',label: 'Добавление ip адресса на роутер')
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 iptables -A FORWARD -o vmbr0 -s 10.20.' + params.SALON + '.0/24 -j ACCEPT',label: 'Правило для исходящего трафика')
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 iptables -A FORWARD -i vmbr0 -d 10.20.' + params.SALON + '.0/24 -j ACCEPT', label: 'Правило для входяего трафика')
						sh ( script: 'ssh -o "StrictHostKeyChecking=no" -i /var/lib/jenkins/.ssh/id_rsa root@192.168.99.168 iptables -t nat -A POSTROUTING -o vmbr0 -s 10.20.' + params.SALON + '.0/24 -j MASQUERADE', label: 'Маскард изнутри во внешку')
					}
					sh ( script: 'sshpass -p \'yjjnhjgbk\' scp -o "StrictHostKeyChecking=no" /home/kroler123/autoanswer.sh root@10.20.' + params.SALON + '.6:/root/autoanswer.sh',label: 'Пересылка файла autoanswer на Proxmox')
				}
			}
		}
		stage ('SSH transfer') {
			when {
				expression { params.ROUTE == true }
			}
			steps {
				script {
					sshPublisher(
						continueOnError: false, failOnError: true,
						publishers: [
							sshPublisherDesc (
								configName: "salon" + params.SALON ,
								sshLabel: [
									label: 'Передача скрипта для кастомизации PROXMOX'
								],
								verbose: true,
								transfers: [
									sshTransfer (
										sourceFiles: 'zpool.sh',
										remoteDirectory: '/opt/',
										execCommand: 'chmod 777 /opt/zpool.sh',
										execTimeout: 0
									),
									sshTransfer (
										execCommand:  '/opt/zpool.sh',
										execTimeout: 0
									)
								]
							)
						]
					)
				}
			}
		}
		stage ('Installed asterisk') {
			when {
				expression { params.ASTERISK == true }
			}
			steps {
				script {
					sshPublisher(
						continueOnError: false, failOnError: true,
						publishers: [
							sshPublisherDesc (
								configName: "salon" + params.SALON ,
								sshLabel: [
									label: 'Загрузка образа centOS 7'
								],
								verbose: true,
								transfers: [
									sshTransfer (
										cleanRemote: false, 
										excludes: '',
										execCommand: '''result=`pveam list local | grep centos | wc -l`
											     if [[ "$result" = "1" ]]; then
											     echo "$result"
											     else
											     pveam download local centos-7-default_20171212_amd64.tar.xz
											     pveam list local
											     fi''',
										execTimeout: 220000, 
										flatten: false, 
										makeEmptyDirs: false, 
										noDefaultExcludes: false, 
										patternSeparator: '[, ]+', 
										remoteDirectory: '/', 
										remoteDirectorySDF: false, 
										removePrefix: '', 
										sourceFiles: ''
									)
								]
							)
						]
					)
					def GET_NET = sh (
						script:'echo ' + params.SALON, 
						label: 'Получаем номер салона' ,
						returnStdout: true
					).trim() as String
					echo "!-------- ${GET_NET} - SALON ---------!"
					sh ( script: 'sudo chmod 777 /etc/ansible', label: 'change mod 777 to the directory /etc/ansible')
					sh ( script: 'sudo chmod 777 /etc/ansible/playbook_kvm_create_vm.yml', label: 'change mod 777 to the file playbook_kvm_create_vm.yml')
					sh ( script: 'sudo chmod 777 /etc/ansible/install_app_asterisk.yml', label: 'change mod 777 to the file install_app_asterisk.yml')
					sh ( script: 'awk \'{gsub("[0-9]*-ATC","' + params.SALON + '-ATC",$0); print > FILENAME}\' /etc/ansible/playbook_kvm_create_vm.yml', label:'change number salon to playbook_kvm_create_vm.yml')
					sh ( script: 'awk \'{gsub("[0-9]*-ATC","' + params.SALON + '-ATC",$0); print > FILENAME}\' /etc/ansible/install_app_asterisk.yml', label:'change number salon to install_app_asterisk..yml')
					sh ( script: 'sudo chmod 744 /etc/ansible/install_app_asterisk.yml', label: 'change mod 744 to the file install_app_asterisk.yml')
					sh ( script: 'sudo chmod 744 /etc/ansible/playbook_kvm_create_vm.yml', label: 'change mod 744 to the file playbook_kvm_create_vm.yml')
					sh ( script: 'sudo chmod 755 /etc/ansible/', label: 'change mod 777 to the directory /etc/ansible')
				}
				ansiblePlaybook (
					playbook: '/etc/ansible/playbook_kvm_create_vm.yml',
					inventory: '/etc/ansible/hosts',
					colorized: true,
					hostKeyChecking: false
				)
				script {
					sshPublisher(
						continueOnError: false, failOnError: true,
						publishers: [
							sshPublisherDesc (
								configName: "salon" + params.SALON ,
								sshLabel: [
									label: 'Installed SSH to server Asterisk'
								],
								verbose: true,
								transfers: [
									sshTransfer (
										cleanRemote: false, 
										excludes: '',
										execCommand: '''sleep 45
												lxc-attach --name 123 -- /usr/bin/yum install -y openssh-server
												lxc-attach --name 123 -- service sshd start
												lxc-attach --name 123 -- chkconfig sshd on''',
										execTimeout: 250000, 
										flatten: false, 
										makeEmptyDirs: false, 
										noDefaultExcludes: false, 
										patternSeparator: '[, ]+', 
										remoteDirectory: '/', 
										remoteDirectorySDF: false, 
										removePrefix: '', 
										sourceFiles: ''
									)
								]
							)
						]
					)
				}
				ansiblePlaybook (
					playbook: '/etc/ansible/install_app_asterisk.yml',
					inventory: '/etc/ansible/hosts',
					colorized: true,
					hostKeyChecking: false
				)
			}
		}
		stage ('Installed ssh') {
			when {
				expression { params.SSH == true }
			}
			steps {
				script {
					def GET_NET = sh (
						script:'echo ' + params.SALON, 
						label: 'Получаем номер салона' ,
						returnStdout: true
					).trim() as String
					echo "!-------- ${GET_NET} - SALON ---------!"
					sh ( script: 'sudo chmod 777 /etc/ansible', label: 'change mod 777 to the directory /etc/ansible')
					sh ( script: 'sudo chmod 777 /etc/ansible/install_app_asterisk.yml', label: 'change mod 777 to the file playbook_sshkey_proxmox.yml')
					sh ( script: 'awk \'{gsub("[0-9]*-PROXMOX","' + params.SALON + '-PROXMOX",$0); print > FILENAME}\' /etc/ansible/playbook_sshkey_proxmox.yml', label:'change number salon to playbook_sshkey_proxmox.yml')
					sh ( script: 'sudo chmod 744 /etc/ansible/install_app_asterisk.yml', label: 'change mod 744 to the file playbook_sshkey_proxmox.yml')
					sh ( script: 'sudo chmod 755 /etc/ansible/', label: 'change mod 777 to the directory /etc/ansible')
				}
				ansiblePlaybook (
					playbook: '/etc/ansible/playbook_sshkey_proxmox.yml',
					inventory: '/etc/ansible/hosts',
					colorized: true,
					hostKeyChecking: false
				)
			}
		}
		stage ('Installed backup') {
			when {
				expression { params.BACKUP == true }
			}
			steps {
				script {
					def GIT_IMG = sh (
						script: 'ssh root@10.20.' + params.SALON + '.6 "ls /tank2/backup/dump/"',
						returnStdout: true,
						label: 'Получаем переменную образа'
					).trim() as String
					if (GIT_IMG != params.IMAGE) {
						echo "Download IMAGE to server PROXMOX" 
						sshPublisher(
							continueOnError: false, failOnError: true,
							publishers: [
								sshPublisherDesc (
									configName: "salon" + params.SALON ,
									sshLabel: [
										label: 'Передача образа windows server '
									],
									verbose: true,
									transfers: [
											sshTransfer (
											sourceFiles: params.IMAGE,
											remoteDirectory: '/tank2/backup/dump/',
											execTimeout: 2220000, 
											flatten: false, 
											makeEmptyDirs: false, 
											noDefaultExcludes: false, 
											patternSeparator: '[, ]+', 
											remoteDirectorySDF: false, 
											removePrefix: '' 
										)
									]
								)
							]
						)
					} else {
						echo "IMAGE is already download $GIT_IMG !"
					}
					def GET_NET = sh (
						script:'echo ' + params.SALON, 
						label: 'Получаем номер салона' ,
						returnStdout: true
					).trim() as String
					echo "!-------- ${GET_NET} - SALON ---------!"
					sh ( script: 'sudo chmod 777 /etc/ansible', label: 'change mod 777 to the directory /etc/ansible')
					sh ( script: 'sudo chmod 777 /etc/ansible/playbook_backup_create_vm.yml', label: 'change mod 777 to the file playbook_backup_create_vm.yml')
					sh ( script: 'awk \'{gsub("[0-9]*-PROXMOX","' + params.SALON + '-PROXMOX",$0); print > FILENAME}\' /etc/ansible/playbook_backup_create_vm.yml', label:'change number salon to playbook_backup_create_vm.yml')
					sh ( script: 'sudo chmod 744 /etc/ansible/playbook_backup_create_vm.yml', label: 'change mod 744 to the file playbook_backup_create_vm.yml')
					sh ( script: 'sudo chmod 755 /etc/ansible/', label: 'change mod 777 to the directory /etc/ansible')
				}
				ansiblePlaybook (
					playbook: '/etc/ansible/playbook_backup_create_vm.yml',
					inventory: '/etc/ansible/hosts',
					colorized: true,
					hostKeyChecking: false
				)
			}
		}
		stage ('Installed DC') {
			when {
				expression { params.DC == true }
			}
			steps {
				script {
					sshPublisher(
						continueOnError: false, failOnError: true,
						publishers: [
							sshPublisherDesc (
								configName: "salon" + params.SALON ,
								sshLabel: [
									label: 'Загрузка образа centOS 7'
								],
								verbose: true,
								transfers: [
									sshTransfer (
										cleanRemote: false, 
										excludes: '',
										execCommand: '''result=`pveam list local | grep centos | wc -l`
											     if [[ "$result" = "1" ]]; then
											     echo "$result"
											     else
											     pveam download local centos-7-default_20171212_amd64.tar.xz
											     pveam list local
											     fi''',
										execTimeout: 220000, 
										flatten: false, 
										makeEmptyDirs: false, 
										noDefaultExcludes: false, 
										patternSeparator: '[, ]+', 
										remoteDirectory: '/', 
										remoteDirectorySDF: false, 
										removePrefix: '', 
										sourceFiles: ''
									)
								]
							)
						]
					)
					def GET_NET = sh (
						script:'echo ' + params.SALON, 
						label: 'Получаем номер салона' ,
						returnStdout: true
					).trim() as String
					echo "!-------- ${GET_NET} - SALON ---------!"
					sh ( script: 'sudo chmod 777 /etc/ansible', label: 'change mod 777 to the directory /etc/ansible')
					sh ( script: 'sudo chmod 777 /etc/ansible/playbook_ldc_create_vm.yml', label: 'change mod 777 to the file playbook_ldc_create_vm.yml')
					sh ( script: 'sudo chmod 777 /etc/ansible/install_app_dc.yml', label: 'change mod 777 to the file install_app_dc.yml')
					sh ( script: 'awk \'{gsub("[0-9]*-DC","' + params.SALON + '-DC",$0); print > FILENAME}\' /etc/ansible/playbook_ldc_create_vm.yml', label:'change number salon to playbook_ldc_create_vm.yml')
					sh ( script: 'awk \'{gsub("[0-9]*-DC","' + params.SALON + '-DC",$0); print > FILENAME}\' /etc/ansible/install_app_dc.yml', label:'change number salon to install_app_dc..yml')
					sh ( script: 'sudo chmod 744 /etc/ansible/install_app_dc.yml', label: 'change mod 744 to the file install_app_dc.yml')
					sh ( script: 'sudo chmod 744 /etc/ansible/playbook_ldc_create_vm.yml', label: 'change mod 744 to the file playbook_ldc_create_vm.yml')
					sh ( script: 'sudo chmod 755 /etc/ansible/', label: 'change mod 777 to the directory /etc/ansible')
				}
				ansiblePlaybook (
					playbook: '/etc/ansible/playbook_ldc_create_vm.yml',
					inventory: '/etc/ansible/hosts',
					colorized: true,
					hostKeyChecking: false
				)
				script {
					sshPublisher(
						continueOnError: false, failOnError: true,
						publishers: [
							sshPublisherDesc (
								configName: "salon" + params.SALON ,
								sshLabel: [
									label: 'Installed SSH to server DC'
								],
								verbose: true,
								transfers: [
									sshTransfer (
										cleanRemote: false, 
										excludes: '',
										execCommand: '''sleep 45
												lxc-attach --name 104 -- sed -i "s/127.0.0.1/192.168.99.99/g" /etc/resolv.conf
												lxc-attach --name 104 -- /usr/bin/yum install -y openssh-server
												lxc-attach --name 104 -- service sshd start
												lxc-attach --name 104 -- chkconfig sshd on ''',
										execTimeout: 250000, 
										flatten: false, 
										makeEmptyDirs: false, 
										noDefaultExcludes: false, 
										patternSeparator: '[, ]+', 
										remoteDirectory: '/', 
										remoteDirectorySDF: false, 
										removePrefix: '', 
										sourceFiles: ''
									)
								]
							)
						]
					)
				}
				ansiblePlaybook(
					playbook: '/etc/ansible/install_app_dc.yml',
					inventory: '/etc/ansible/hosts',
					colorized: true,
					hostKeyChecking: false
				)
			}
		}
	}
}
